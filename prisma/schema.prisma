// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:@localhost:3306/ultimate_setup_ecommerce"
}

model User {
  id          Int      @id @default(autoincrement())
  clerkUserId String   @unique
  email       String   @unique
  firstName   String?
  lastName    String?
  imageUrl    String?
  role        String   @default("USER")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]
  carts       Cart[]
  favorites   Favorite[]
  notifications Notification[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float
  imageUrl    String?
  stock       Int
  specs       Json?
  categoryId  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  category    Category @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  cartItems   CartItem[]
  favorites   Favorite[]
}

model Category {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  description String?
  products Product[]
}

model Order {
  id                  Int      @id @default(autoincrement())
  userId              Int
  total               Float
  status              String   @default("pending") // pending, paid, shipped, delivered, cancelled
  paymentStatus       String   @default("pending") // pending, succeeded, failed, refunded
  stripePaymentId     String?  @unique // Stripe payment intent ID
  stripeSessionId     String?  @unique // Stripe checkout session ID
  shippingAddress     Json?    // Adresse de livraison
  billingAddress      Json?    // Adresse de facturation
  paymentMethod       String?  // Type de paiement (card, paypal, etc.)
  notes               String?  // Notes de commande
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id])
  items               OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  
  @@unique([cartId, productId])
}

model Configuration {
  id          Int      @id @default(autoincrement())
  name        String
  components  Json     // Configuration des composants sélectionnés
  notes       Json?    // Notes personnelles
  totalPrice  Float
  userId      String   @default("anonymous") // Pour les utilisateurs non connectés
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Favorite {
  id        String   @id @default(cuid())
  userId    Int
  productId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  
  @@unique([userId, productId])
}

model Notification {
  id        String   @id @default(cuid())
  type      String   // info, success, warning, error, promotion
  title     String
  message   String
  isRead    Boolean  @default(false)
  link      String?  // Lien optionnel
  icon      String?  // Icône optionnelle
  userId    Int?     // null pour les notifications globales
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
